import { User } from "../models/User.model.js";
import ApiError from "../utils/ApiError.js";
import asyncHandler from "../utils/asyncHandler.js";
import uploadOnCloudinary from "../utils/cloudinary.js";
import ApiResponse from "../utils/ApiResponse.js";


const registerUser = asyncHandler(async (req, res) => {
    const {fullName, email, username, password} = req.body;
    if([fullName, email, username, password].some((field) => field.trim() === "")){
        throw new ApiError(400, "All fields are required")
    }
    const existedUser = User.findOne({
        $or: [{username}, {email}]
    }) // method in mongoose to find the user using email or username.

    if(existedUser){
        throw new ApiError(409, "Username or email already exists");
    }

    const avatarLocalPath = req.files?.avatar[0]?.path; //req.files access is given by multer. Multer conatins data in files not in body as json.
    const coverImageLocalPath = req.files?.coverImage[0]?.path;

    if(!avatarLocalPath){
        throw new ApiError(400, "Avatar file is required")
    }

    const avatar = await uploadOnCloudinary(avatarLocalPath);
    let coverImage = "";
    if(coverImageLocalPath){
         coverImage = await uploadOnCloudinary(coverImageLocalPath);
    }
    if(!avatar){
        throw new ApiError(400, "Avatar file is required")
    }

    const user = await User.create({
        fullName,
        email,
        username: username.toLowerCase(),
        password,
        avatar: avatar?.url,
        coverImage: coverImage?.url || ""
    }) // create method makes an object and store it in db with a special id(named _id).

    const createdUser = await User.findById(user._id) //finds the user by id generated by mongodb.
    .select("-password -refreshToken") // removes password and refreshToken from object.
    if(!createdUser){
        throw new ApiError(500, "Something went wrong while registering the user!");
    }

    return res.status(201).json(
        new ApiResponse(201, createdUser, "User registered successfully")
    )
})

export default registerUser;